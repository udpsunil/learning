type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0

            start_fields = (
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            )

            for start_field in start_fields:
                for input in inputs:
                    full_input = iterate_cells(input)

                    str_nums = input.split()
                    x = int(str_nums[0])
                    y = int(str_nums[1])

                    if i % 2 == 1:
                        full_input = f'4 {i}\n' + full_input

                    tests += [
                        TestCase(
                            stdin=start_field + '\n' + full_input,
                            attach=(start_field, x, y)
                        )
                    ]

                    i += 1

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            clue_input, clue_x, clue_y = attach

            fields = TicTacToeField.parse_all(reply)

            if len(fields) != 2:
                return CheckResult.wrong(
                    f"You should output exactly 2 fields, found: {len(fields)}"
                )

            curr: TicTacToeField = fields[0]
            next: TicTacToeField = fields[1]

            correct_curr = TicTacToeField(field=clue_input)
            correct_next = TicTacToeField(constructed=correct_curr.field)

            num_inputs = iterate_cells(f'{clue_x} {clue_y}').split('\n')

            for input in num_inputs:
                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])
                if correct_next.field[y - 1][x - 1] == FieldState.FREE:
                    correct_next.field[y - 1][x - 1] = FieldState.X
                    break

            if not curr.equal_to(correct_curr):
                return CheckResult.wrong(
                    "The first field is not equal to the input field"
                )

            if not next.equal_to(correct_next):
                return CheckResult.wrong(
                    "The first field is correct, but the second is not"
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tictactoe.py
  visible: true
  text: |
    # write your code here
    def print_ttt(ttt):
        print(9 * "-")
        for index in range(0, len(ttt), 3):
            print("| " + " ".join(list(ttt[index: index + 3])) + " |")
        print(9 * "-")


    def game_not_finished(l):
        if abs(l.count('X') - l.count('O')) not in [0, 1]:
            print("Impossible")
            exit()
        if '_' in l:
            print("Game not finished")
            exit()


    def segregate(l):
        row = [l[index:index + 3] for index in range(0, len(l), 3)]
        column = [l[index] + l[index + 3] + l[index + 6] for index in range(3)]
        cross = [l[0] + l[4] + l[8], l[2] + l[4] + l[6]]
        return row + column + cross


    def reduce(seg_line):
        return [check for check in seg_line if len(set(check)) == 1]


    def draw(outcome):
        if len(outcome) == 0:
            print("Draw")
            exit()


    def win(outcome):
        if len(outcome) == 1:
            if set(list(outcome[0])) == set('X'):
                print("X wins")
                exit()
            elif set(list(outcome[0])) == set('O'):
                print("O wins")
                exit()


    def impossible(outcome):
        if len(outcome) > 1:
            print("Impossible")
            exit()


    def process_ttt(line):
        segregated_line = segregate(line)
        reduced_result = reduce(segregated_line)
        win(reduced_result)
        impossible(reduced_result)
        game_not_finished(line)
        draw(reduced_result)


    def handle_input(line):
        print_ttt(line)
        process_ttt(line)


    ttt_list = input("Enter cells: ")
    handle_input(ttt_list)
  learner_created: true
feedback_link: https://hyperskill.org/projects/73/stages/402/implement
status: Solved
record: 4
